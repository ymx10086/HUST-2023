fun printInt (a:int) =     print(Int.toString(a)^" ");  fun getInt () =     Option.valOf (TextIO.scanStream (Int.scan StringCvt.DEC) TextIO.stdIn);      fun printIntList ( [] ) = ()   | printIntList ( x::xs ) =      let 	val tmp = printInt(x)     in 	printIntList(xs)     end;  fun getIntList ( 0 ) = []   | getIntList ( N:int) = getInt()::getIntList(N-1);  fun split [ ]  = ([ ], [ ])      | split [x] = ([ ], [x])     | split (x::y::L) = 	let val (A, B) =split L 	in (x::A, y::B) 	 	end;  datatype tree = Empty | Br of tree * int * tree;   fun trav(Br(t1,a,t2)) = trav(t1)@(a::trav(t2))     |trav empty = [];  fun listToTree ([] : int list) : tree = Empty   | listToTree (x::l) = let val (l1, l2) = split l     	in Br(listToTree l1, x, listToTree l2)   end;  (*begin*)  datatype order = LT | EQ | GT;  fun treecompare (t1, t2) =          case (t1, t2) of  (Empty, Empty) =>EQ       | (Empty, _) => LT     | (_, Empty) => GT     | (Br (_, a1, _), Br (_, a2, _)) =>     if a1 < a2 then LT      else if a1 = a2 then EQ     else GT;  fun SwapDown (Empty) = Empty      | SwapDown (Br (Empty, x, Empty)) = Br (Empty, x, Empty)      | SwapDown (Br (Empty, x, Br (rl, rx, rr))) =          if x <= rx then Br (Empty, x, Br (rl, rx, rr))          else Br (Empty, rx, SwapDown (Br (rl, x, rr)))     | SwapDown (Br (Br (ll, lx, lr), x, Empty)) =          if x <= lx then Br (Br (ll, lx, lr), x, Empty)         else Br (SwapDown(Br (ll, x, lr)), lx, Empty)     | SwapDown (Br (Br (ll, lx, lr), x, Br (rl, rx, rr))) =         if x >= lx andalso x <= rx then            Br (Br (ll, lx, lr), x, Br (rl, rx, rr))     else if x <= lx andalso lx <= rx then       Br (SwapDown(Br (ll, x, lr)), lx, Br (rl, rx, rr))     else if lx <= rx andalso rx <= x then       Br (SwapDown(Br (ll, lx, lr)), rx, SwapDown(Br (rl, x, rr)))     else if x >= rx andalso x <= lx then       Br (SwapDown(Br (ll, rx, lr)), x, SwapDown(Br (rl, lx, rr)))     else if lx >= rx andalso lx <= x then       Br (SwapDown(Br (ll, rx, lr)), lx, SwapDown(Br (rl, x, rr)))     else        Br (SwapDown(Br (ll, x, lr)), rx, SwapDown(Br (rl, lx, rr)));  fun heapify Empty = Empty      | heapify (Br (l, x, r)) =          let    val leftHeap = heapify l;            val rightHeap = heapify r;          in SwapDown (Br (leftHeap, x, rightHeap))     end;   (*end*)  val L = getIntList(7); printIntList (trav(heapify(listToTree L)));